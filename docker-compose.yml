services:
  # Databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: lms_db
      POSTGRES_USER: lms_user
      POSTGRES_PASSWORD: lms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Message Queue
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # API Gateway
  kong:
    image: kong:3.4
    ports:
      - "8001:8001"
      - "8000:8000"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/kong/kong.yml

  # Microservices
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    ports:
      - "8010:8010"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  user-service:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    ports:
      - "8011:8011"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  classes-service:
    build:
      context: .
      dockerfile: services/classes/Dockerfile
    ports:
      - "8023:8004"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
      SERVICE_PORT: 8004
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  subjects-service:
    build:
      context: .
      dockerfile: services/subjects/Dockerfile
    ports:
      - "8024:8005"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
      SERVICE_PORT: 8005
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  semesters-service:
    build:
      context: .
      dockerfile: services/semesters/Dockerfile
    ports:
      - "8022:8006"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
      SERVICE_PORT: 8006
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  department-service:
    build:
      context: .
      dockerfile: services/departments/Dockerfile
    ports:
      - "8012:8012"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  exam-service:
    build:
      context: .
      dockerfile: services/exams/Dockerfile
    ports:
      - "8013:8013"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  marks-service:
    build:
      context: .
      dockerfile: services/marks/Dockerfile
    ports:
      - "8014:8014"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  analytics-service:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    ports:
      - "8015:8015"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  bulk-service:
    build:
      context: .
      dockerfile: services/bulk/Dockerfile
    ports:
      - "8016:8016"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  export-service:
    build:
      context: .
      dockerfile: services/exports/Dockerfile
    ports:
      - "8017:8017"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  notification-service:
    build:
      context: .
      dockerfile: services/notifications/Dockerfile
    ports:
      - "8018:8018"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  file-service:
    build:
      context: .
      dockerfile: services/files/Dockerfile
    ports:
      - "8019:8019"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  questionbank-service:
    build:
      context: .
      dockerfile: services/questionbank/Dockerfile
    ports:
      - "8020:8020"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  monitoring-service:
    build:
      context: .
      dockerfile: services/monitoring/Dockerfile
    ports:
      - "8021:8021"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backups:/app/backups
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Attendance Service
  attendance-service:
    build:
      context: .
      dockerfile: services/attendance/Dockerfile
    ports:
      - "8008:8008"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
      SERVICE_PORT: 8008
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Promotion Service
  promotion-service:
    build:
      context: .
      dockerfile: services/promotion/Dockerfile
    ports:
      - "8009:8009"
    environment:
      DATABASE_URL: postgresql://lms_user:lms_password@postgres:5432/lms_db
      REDIS_URL: redis://redis:6379
      KAFKA_URL: kafka:9092
      SERVICE_PORT: 8009
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    depends_on:
      - kong

volumes:
  postgres_data:
  redis_data: